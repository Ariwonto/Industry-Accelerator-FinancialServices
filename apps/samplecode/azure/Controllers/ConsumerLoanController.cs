//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace FinancialServicesAccelerator.BIAN.WebApi.Controllers
{
#pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IConsumerLoanController
    {
        /// <summary>Initiate-new consumer loan</summary>
        /// <returns>Initiated setup of consumer loan</returns>
        System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> InitiateConsumerLoanFulfillmentArrangementAsync(InitiateConsumerLoanFulfillmentArrangementRequest body = null);

        /// <summary>Record active consumer loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>A new record is created</returns>
        System.Threading.Tasks.Task<RecordConsumerLoanFulfillmentArrangementResponse> RecordConsumerLoanFulfillmentArrangementAsync(string cr_reference_id, RecordConsumerLoanFulfillmentArrangementRequest body = null);

        /// <summary>Update disbursement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Disbursement Order Reference</param>
        /// <returns>Successfully Updated consumer loan disbursement execution</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> ExecuteConsumerLoanFulfillmentArrangementDisbursementUpdateAsync(string cr_reference_id, string bq_reference_id, ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest body = null);

        /// <summary>Create disbursement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully created a new consumer loan disbursement execution record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> ExecuteConsumerLoanFulfillmentArrangementDisbursementCreateAsync(string cr_reference_id, ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest body = null);

        /// <summary>Update staged repayment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Payment Transaction Reference</param>
        /// <returns>Successfully Updated Consumer Loan Payment Execution record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> ExecuteConsumerLoanFulfillmentArrangementRepaymentUpdateAsync(string cr_reference_id, string bq_reference_id, ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest body = null);

        /// <summary>Create staged repayment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully Created a Consumer Loan Payment Execution record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> ExecuteConsumerLoanFulfillmentArrangementRepaymentCreateAsync(string cr_reference_id, ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest body = null);

        /// <summary>Update withdrawal</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Withdrawal Instruction Reference</param>
        /// <returns>Successfully Updated Consumer Loan Withdrawl Execution Record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> ExecuteConsumerLoanFulfillmentArrangementWithdrawalUpdateAsync(string cr_reference_id, string bq_reference_id, ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest body = null);

        /// <summary>Create withdrawal</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully Created Consumer Loan Withdrawl Execution Record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> ExecuteConsumerLoanFulfillmentArrangementWithdrawalCreateAsync(string cr_reference_id, ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest body = null);

        /// <summary>Request restructuring updation</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Restructuring Task Reference</param>
        /// <returns>Successfully updated consumer loan restructuring request</returns>
        System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> RequestConsumerLoanFulfillmentArrangementRestructuringUpdateAsync(string cr_reference_id, string bq_reference_id, ConsumerLoanRestructuringWithoutCommonAndId body = null);

        /// <summary>Request restructuring creation</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfuly created consumer loan restructuring request</returns>
        System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> RequestConsumerLoanFulfillmentArrangementRestructuringCreateAsync(string cr_reference_id, ConsumerLoanRestructuringWithoutCommonAndId body = null);

        /// <summary>Retrieve Control Record Ids</summary>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'customer-reference-id = CR123'</param>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveConsumerLoanReferenceIdsAsync(string collection_filter = null);

        /// <summary>Retrieve all Behaviour Qualifier names</summary>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveConsumerLoanBehaviorQualifiersAsync();

        /// <summary>Retrieve Behaviour Qualifier Reference Ids.</summary>
        /// <param name="cr_reference_id">Product Instance Reference</param>
        /// <param name="behavior_qualifier">Behavior Qualifier Name. ex- payment</param>
        /// <param name="collection_filter">Filter to refine the result set. ex- "customerReference == 'CR77745'"</param>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveBehaviorQualifierReferenceIdsAsync(string cr_reference_id, string behavior_qualifier, string collection_filter = null);

        /// <summary>Retrieve consumer loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Retrieved consumer loan reporting</returns>
        System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> RetrieveConsumerLoanFulfillmentArrangementWithBQsAsync(string cr_reference_id);

        /// <summary>Termination for an active loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully TerminatedConsumer Loan</returns>
        System.Threading.Tasks.Task TerminateConsumerLoanFulfillmentArrangementAsync(string cr_reference_id);

        /// <summary>Retrieve Disbursements</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Disbursement Order Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Disbursement Record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> Retrieve_DisbursementAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Maintenance</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Product Fulfillment Schedule</param>
        /// <returns>Successfully Retrieved Consumer Loan Maintenance Record</returns>
        System.Threading.Tasks.Task<RetrieveMaintenanceResponse> Retrieve_MaintenanceAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Wthdrawl Record</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Withdrawal Instruction Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Withdrawl Record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> Retrieve_WithdrawalAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Payment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Payment Transaction Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Payment Record</returns>
        System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> Retrieve_PaymentAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Restructurings</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Restructuring Task Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Restructurings Record</returns>
        System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> Retrieve_RestructuringAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieved Statement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Statement Instance Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Statement Record</returns>
        System.Threading.Tasks.Task<RetrieveStatementsResponse> Retrieve_StatementsAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Update an Active Consumer Loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="body">Update control record request payload</param>
        /// <returns>Successfully Updated Active Consumer Loan</returns>
        System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> UpdateConsumerLoanFulfillmentArrangementAsync(string cr_reference_id, InitiateConsumerLoanFulfillmentArrangementRequest body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("sd-consumer-loan/v1")]
    [Microsoft.AspNetCore.Authorization.Authorize]
    public partial class ConsumerLoanController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IConsumerLoanController _implementation;

        public ConsumerLoanController(IConsumerLoanController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Initiate-new consumer loan</summary>
        /// <returns>Initiated setup of consumer loan</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/initiation")]
        public System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> InitiateConsumerLoanFulfillmentArrangement([Microsoft.AspNetCore.Mvc.FromBody] InitiateConsumerLoanFulfillmentArrangementRequest body = null)
        {
            return _implementation.InitiateConsumerLoanFulfillmentArrangementAsync(body);
        }

        /// <summary>Record active consumer loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>A new record is created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/recording")]
        public System.Threading.Tasks.Task<RecordConsumerLoanFulfillmentArrangementResponse> RecordConsumerLoanFulfillmentArrangement(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RecordConsumerLoanFulfillmentArrangementRequest body = null)
        {
            return _implementation.RecordConsumerLoanFulfillmentArrangementAsync(cr_reference_id, body);
        }

        /// <summary>Update disbursement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Disbursement Order Reference</param>
        /// <returns>Successfully Updated consumer loan disbursement execution</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/disbursements/{bq_reference_id}/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> ExecuteConsumerLoanFulfillmentArrangementDisbursementUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementDisbursementUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>Create disbursement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully created a new consumer loan disbursement execution record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/disbursements/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> ExecuteConsumerLoanFulfillmentArrangementDisbursementCreate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementDisbursementCreateAsync(cr_reference_id, body);
        }

        /// <summary>Update staged repayment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Payment Transaction Reference</param>
        /// <returns>Successfully Updated Consumer Loan Payment Execution record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/payments/{bq_reference_id}/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> ExecuteConsumerLoanFulfillmentArrangementRepaymentUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementRepaymentUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>Create staged repayment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully Created a Consumer Loan Payment Execution record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/payments/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> ExecuteConsumerLoanFulfillmentArrangementRepaymentCreate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementRepaymentCreateAsync(cr_reference_id, body);
        }

        /// <summary>Update withdrawal</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Withdrawal Instruction Reference</param>
        /// <returns>Successfully Updated Consumer Loan Withdrawl Execution Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/withdrawals/{bq_reference_id}/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> ExecuteConsumerLoanFulfillmentArrangementWithdrawalUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementWithdrawalUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>Create withdrawal</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully Created Consumer Loan Withdrawl Execution Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/withdrawals/execution")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> ExecuteConsumerLoanFulfillmentArrangementWithdrawalCreate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest body = null)
        {
            return _implementation.ExecuteConsumerLoanFulfillmentArrangementWithdrawalCreateAsync(cr_reference_id, body);
        }

        /// <summary>Request restructuring updation</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Restructuring Task Reference</param>
        /// <returns>Successfully updated consumer loan restructuring request</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/restructurings/{bq_reference_id}/requisition")]
        public System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> RequestConsumerLoanFulfillmentArrangementRestructuringUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ConsumerLoanRestructuringWithoutCommonAndId body = null)
        {
            return _implementation.RequestConsumerLoanFulfillmentArrangementRestructuringUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>Request restructuring creation</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfuly created consumer loan restructuring request</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/restructurings/requisition")]
        public System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> RequestConsumerLoanFulfillmentArrangementRestructuringCreate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] ConsumerLoanRestructuringWithoutCommonAndId body = null)
        {
            return _implementation.RequestConsumerLoanFulfillmentArrangementRestructuringCreateAsync(cr_reference_id, body);
        }

        /// <summary>Retrieve Control Record Ids</summary>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'customer-reference-id = CR123'</param>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveConsumerLoanReferenceIds(string collection_filter = null)
        {
            return _implementation.RetrieveConsumerLoanReferenceIdsAsync(collection_filter);
        }

        /// <summary>Retrieve all Behaviour Qualifier names</summary>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/behavior-qualifiers/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveConsumerLoanBehaviorQualifiers()
        {
            return _implementation.RetrieveConsumerLoanBehaviorQualifiersAsync();
        }

        /// <summary>Retrieve Behaviour Qualifier Reference Ids.</summary>
        /// <param name="cr_reference_id">Product Instance Reference</param>
        /// <param name="behavior_qualifier">Behavior Qualifier Name. ex- payment</param>
        /// <param name="collection_filter">Filter to refine the result set. ex- "customerReference == 'CR77745'"</param>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/{behavior_qualifier}/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveBehaviorQualifierReferenceIds(string cr_reference_id, string behavior_qualifier, string collection_filter = null)
        {
            return _implementation.RetrieveBehaviorQualifierReferenceIdsAsync(cr_reference_id, behavior_qualifier, collection_filter);
        }

        /// <summary>Retrieve consumer loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Retrieved consumer loan reporting</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}")]
        public System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> RetrieveConsumerLoanFulfillmentArrangementWithBQs(string cr_reference_id)
        {
            return _implementation.RetrieveConsumerLoanFulfillmentArrangementWithBQsAsync(cr_reference_id);
        }

        /// <summary>Termination for an active loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <returns>Successfully TerminatedConsumer Loan</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}")]
        public System.Threading.Tasks.Task TerminateConsumerLoanFulfillmentArrangement(string cr_reference_id)
        {
            return _implementation.TerminateConsumerLoanFulfillmentArrangementAsync(cr_reference_id);
        }

        /// <summary>Retrieve Disbursements</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Disbursement Order Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Disbursement Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/disbursements/{bq_reference_id}")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse> Retrieve_Disbursement(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_DisbursementAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Maintenance</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Product Fulfillment Schedule</param>
        /// <returns>Successfully Retrieved Consumer Loan Maintenance Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/maintenances/{bq_reference_id}")]
        public System.Threading.Tasks.Task<RetrieveMaintenanceResponse> Retrieve_Maintenance(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_MaintenanceAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Wthdrawl Record</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Withdrawal Instruction Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Withdrawl Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/withdrawals/{bq_reference_id}")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse> Retrieve_Withdrawal(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_WithdrawalAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Payment</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Payment Transaction Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Payment Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/payments/{bq_reference_id}")]
        public System.Threading.Tasks.Task<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse> Retrieve_Payment(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_PaymentAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Restructurings</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Restructuring Task Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Restructurings Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/restructurings/{bq_reference_id}")]
        public System.Threading.Tasks.Task<RequestConsumerLoanFulfillmentArrangementRestructuringResponse> Retrieve_Restructuring(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_RestructuringAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieved Statement</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="bq_reference_id">Statement Instance Reference</param>
        /// <returns>Successfully Retrieved Consumer Loan Statement Record</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/statements/{bq_reference_id}")]
        public System.Threading.Tasks.Task<RetrieveStatementsResponse> Retrieve_Statements(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.Retrieve_StatementsAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Update an Active Consumer Loan</summary>
        /// <param name="cr_reference_id">Product Instance Reference (loan account number)</param>
        /// <param name="body">Update control record request payload</param>
        /// <returns>Successfully Updated Active Consumer Loan</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("consumer-loan/consumer-loan-fulfillment-arrangement/{cr_reference_id}/updation")]
        public System.Threading.Tasks.Task<ConsumerLoanFulfillmentArrangementResponse> UpdateConsumerLoanFulfillmentArrangement(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] InitiateConsumerLoanFulfillmentArrangementRequest body)
        {
            return _implementation.UpdateConsumerLoanFulfillmentArrangementAsync(cr_reference_id, body);
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanBase
    {
        /// <summary>`status: Registered`
        /// iso-link: [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// bian-reference: Loan.Agreement.TradePartyRole(as Borrower)(as Role).Player(as Party)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAgreementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAgreementReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Party).AccountableParty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.CreditCheck
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCreditAssessmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCreditAssessmentReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delinquencyCollectionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelinquencyCollectionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asLender)(asRole).Player(asParty).Location
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633/elements/_z2I6YGx5EeKmZJ0Ago--9g_239738909)
        /// general-info: for processing/logistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankBranchLocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBranchLocationReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: for booking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountingUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountingUnitReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asGiverRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0ocTGEeChad0JzLk7QA_1159142715)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asTakerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ex8eFcTGEeChad0JzLk7QA_-1939123823)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuaranteeBeneficiary)
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0p8TGEeChad0JzLk7QA_-1821987913)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuarantorRole)
        /// iso-link-4:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0psTGEeChad0JzLk7QA_150894546)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asBorrower)
        /// iso-link-5:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asLender)
        /// iso-link-6:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4d1CEeGAp99n2TKigg_-1009340668)
        /// general-info: guarantor/cosigner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyObligationEntitlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyObligationEntitlement { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanType
        /// general-info: term, revolving, evergreen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanAmount { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan(asDebt).PaymentCurrency
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_X0hLUKRMEeO1ke9HGqKZhg)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanCurrency { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest.VariableRateChangeFrequency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Fd5lKcTGEeChad0JzLk7QA_-958104524/elements/_FeNHIMTGEeChad0JzLk7QA_-12422289)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRateType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.PaymentPeriod
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.PaymentPeriod
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRepaymentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRepaymentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestAccrualMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestAccrualMethod { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272632)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanOutstandingBalance { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOriginationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanOriginationDate { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanMaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanMaturityDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E6vNtsTGEeChad0JzLk7QA_393174175/elements/_lrcFQC1hEeGp2Zpvgj9Dtw_-638405304)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAllocation { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanProduct(as Product).AvailableOption
        /// `status: Provisionally Registered`
        /// bian-reference: Loan.SelectedOption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationOptions { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FEHzNMTGEeChad0JzLk7QA_-1382123937/elements/_FEHzNcTGEeChad0JzLk7QA_-1792766550)
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower).Player(as Party).Identification.TaxIdentificationNumber
        /// general-info: Tax-Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).PrePaymentSpeed
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_Fg4nt8TGEeChad0JzLk7QA_742037711)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.Limit
        /// general-info: allowed payments/withdrawals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAccessTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanAccessTerms { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCommentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCommentary { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanBase>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanWithIdAndStatus
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Agreement.TradePartyRole(asBorrower)(asRole).Player(asParty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAgreementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAgreementReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Party).AccountableParty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCreditAssessmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCreditAssessmentReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delinquencyCollectionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelinquencyCollectionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asLender)(asRole).Player(asParty).Location
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633/elements/_z2I6YGx5EeKmZJ0Ago--9g_239738909)
        /// general-info: for processing/logistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankBranchLocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBranchLocationReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Organisation).BusinessUnit
        /// general-info: for booking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountingUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountingUnitReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asGiverRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0ocTGEeChad0JzLk7QA_1159142715)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asTakerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ex8eFcTGEeChad0JzLk7QA_-1939123823)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuaranteeBeneficiary)
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0p8TGEeChad0JzLk7QA_-1821987913)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuarantorRole)
        /// iso-link-4:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0psTGEeChad0JzLk7QA_150894546)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asBorrower)
        /// iso-link-5:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asLender)
        /// iso-link-6:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4d1CEeGAp99n2TKigg_-1009340668)
        /// general-info: guarantor/cosigner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyObligationEntitlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyObligationEntitlement { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanType
        /// general-info: term, revolving, evergreen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanAmount { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan(asDebt).PaymentCurrency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_X0hLUKRMEeO1ke9HGqKZhg)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanCurrency { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest.VariableRateChangeFrequency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Fd5lKcTGEeChad0JzLk7QA_-958104524/elements/_FeNHIMTGEeChad0JzLk7QA_-12422289)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRateType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.PaymentPeriod
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.PaymentPeriod
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRepaymentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRepaymentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestAccrualMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestAccrualMethod { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272632)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanOutstandingBalance { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOriginationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanOriginationDate { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanMaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanMaturityDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E6vNtsTGEeChad0JzLk7QA_393174175/elements/_lrcFQC1hEeGp2Zpvgj9Dtw_-638405304)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAllocation { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanProduct(asProduct).AvailableOption
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.SelectedOption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationOptions { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower).Player(asParty).Identification.TaxIdentificationNumber
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FEHzNMTGEeChad0JzLk7QA_-1382123937/elements/_FEHzNcTGEeChad0JzLk7QA_-1792766550)
        /// general-info: Tax-Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).PrePaymentSpeed
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_Fg4nt8TGEeChad0JzLk7QA_742037711)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.Limit
        /// general-info: allowed payments/withdrawals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAccessTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanAccessTerms { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanStatus
        /// general-info: active, overdue, in-suspense, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanStatus { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCommentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCommentary { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanWithIdAndStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanWithIdAndStatus>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanDisbursementWithoutCommonAndId
    {
        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)(asRole).Player(asParty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E4gZEcTGEeChad0JzLk7QA_2010102988)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanDisbursementWithoutCommonAndId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanDisbursementWithoutCommonAndId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanDisbursementWithId
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.Disbursement.DisbursementOrder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disbursementOrderReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementOrderReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)(asRole).Player(asParty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E4gZEcTGEeChad0JzLk7QA_2010102988)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanDisbursementWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanDisbursementWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanMaintenanceWithId
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: tasks, e.g. reporting and loan review actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productFulfillmentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFulfillmentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code
        /// general-info: e.g tax, regulatory, accounting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTaxReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object LoanTaxReport { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanFeeType { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asCharges)
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asCharges)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FMBK9sTGEeChad0JzLk7QA_-398781908)
        /// general-info: as booked against loan account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanFees { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asPenalty)
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asPenalty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_eEiTMHRkEeKIFpWttHerUA_-261419352)
        /// general-info: as booked against loan account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penalties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Penalties { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).GovernedContract(asCollateralAgreement).Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value confirmed as of date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralValuation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralValuation { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanMaintenanceWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanMaintenanceWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanWithdrawalWithoutCommonAndId
    {
        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanWithdrawalWithoutCommonAndId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanWithdrawalWithoutCommonAndId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanWithdrawalWithId
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("withdrawlInstructionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WithdrawlInstructionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanWithdrawalWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanWithdrawalWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanPaymentWithoutCommonAndId
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).AccountPartyRole(asAccountOwnerRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EysE9cTGEeChad0JzLk7QA_-200588046)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanOutstandingBalance { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanPaymentWithoutCommonAndId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanPaymentWithoutCommonAndId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanPaymentsWithId
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTransactionReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).AccountPartyRole(asAccountOwnerRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EysE9cTGEeChad0JzLk7QA_-200588046)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Registered`
        /// bian-reference-2:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanOutstandingBalance { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanPaymentsWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanPaymentsWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanRestructuringWithoutCommonAndId
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringTask { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of issue to resolve
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringEvaluation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringEvaluation { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of loan terms and configuration impact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringSolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringSolution { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: loss/costs of restructuring
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructingWriteDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructingWriteDown { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanRestructuringWithoutCommonAndId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanRestructuringWithoutCommonAndId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanRestructuringWithId
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringTaskReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringTaskReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringTask { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of issue to resolve
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringEvaluation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringEvaluation { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of loan terms and configuration impact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringSolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringSolution { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: loss/costs of restructuring
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructingWriteDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructingWriteDown { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanRestructuringWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanRestructuringWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanStatementWithId
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: statement content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementTransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementTransactionType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Duration
        /// general-info: from-to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementPeriod { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionRecordReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionRecordReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionPrincipleAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount TransactionPrincipleAmount { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string TransactionDateTime { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanStatementWithId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanStatementWithId>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanRecordRequest
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RecordingRecord { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string RecordingRecordDateTime { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("empolyeeBusinessUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmpolyeeBusinessUnitReference { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanRecordRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanRecordRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanRecordResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanRecordResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanRecordResponse>(data);
        }

    }

    /// <summary>`status: Registered`
    /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
    /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
    /// Note: A zero amount is considered a positive amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyAndAmount
    {
        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CurrencyAndAmount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAndAmount>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InitiateConsumerLoanFulfillmentArrangementRequest
    {
        /// <summary>`status: Registered`
        /// iso-link: [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// bian-reference: Loan.Agreement.TradePartyRole(as Borrower)(as Role).Player(as Party)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAgreementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAgreementReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Party).AccountableParty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.CreditCheck
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCreditAssessmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCreditAssessmentReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delinquencyCollectionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelinquencyCollectionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asLender)(asRole).Player(asParty).Location
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633/elements/_z2I6YGx5EeKmZJ0Ago--9g_239738909)
        /// general-info: for processing/logistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankBranchLocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBranchLocationReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: for booking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountingUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountingUnitReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asGiverRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0ocTGEeChad0JzLk7QA_1159142715)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asTakerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ex8eFcTGEeChad0JzLk7QA_-1939123823)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuaranteeBeneficiary)
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0p8TGEeChad0JzLk7QA_-1821987913)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuarantorRole)
        /// iso-link-4:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0psTGEeChad0JzLk7QA_150894546)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asBorrower)
        /// iso-link-5:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asLender)
        /// iso-link-6:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4d1CEeGAp99n2TKigg_-1009340668)
        /// general-info: guarantor/cosigner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyObligationEntitlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyObligationEntitlement { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanType
        /// general-info: term, revolving, evergreen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanAmount { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan(asDebt).PaymentCurrency
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_X0hLUKRMEeO1ke9HGqKZhg)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanCurrency { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest.VariableRateChangeFrequency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Fd5lKcTGEeChad0JzLk7QA_-958104524/elements/_FeNHIMTGEeChad0JzLk7QA_-12422289)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRateType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.PaymentPeriod
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.PaymentPeriod
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRepaymentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRepaymentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestAccrualMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestAccrualMethod { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272632)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanOutstandingBalance { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOriginationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanOriginationDate { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanMaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanMaturityDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E6vNtsTGEeChad0JzLk7QA_393174175/elements/_lrcFQC1hEeGp2Zpvgj9Dtw_-638405304)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAllocation { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanProduct(as Product).AvailableOption
        /// `status: Provisionally Registered`
        /// bian-reference: Loan.SelectedOption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationOptions { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FEHzNMTGEeChad0JzLk7QA_-1382123937/elements/_FEHzNcTGEeChad0JzLk7QA_-1792766550)
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower).Player(as Party).Identification.TaxIdentificationNumber
        /// general-info: Tax-Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).PrePaymentSpeed
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_Fg4nt8TGEeChad0JzLk7QA_742037711)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.Limit
        /// general-info: allowed payments/withdrawals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAccessTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanAccessTerms { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCommentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCommentary { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InitiateConsumerLoanFulfillmentArrangementRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InitiateConsumerLoanFulfillmentArrangementRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RecordConsumerLoanFulfillmentArrangementRequest
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RecordingRecord { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string RecordingRecordDateTime { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("empolyeeBusinessUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmpolyeeBusinessUnitReference { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecordConsumerLoanFulfillmentArrangementRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordConsumerLoanFulfillmentArrangementRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest : ExecutionBase
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E4gZEcTGEeChad0JzLk7QA_2010102988)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }


        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementDisbursementRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest : ExecutionBase
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerBankReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanOutstandingBalance { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementRepaymentRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest
    {
        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementWithdrawalRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsumerLoanFulfillmentArrangementResponse
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Agreement.TradePartyRole(asBorrower)(asRole).Player(asParty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerAgreementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAgreementReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Party).AccountableParty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCreditAssessmentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCreditAssessmentReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delinquencyCollectionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelinquencyCollectionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asLender)(asRole).Player(asParty).Location
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633/elements/_z2I6YGx5EeKmZJ0Ago--9g_239738909)
        /// general-info: for processing/logistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankBranchLocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBranchLocationReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: LoanAgreement.TradePartyRole(as Borrower)(as Role).Player(as Organisation).BusinessUnit
        /// general-info: for booking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountingUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountingUnitReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asGiverRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0ocTGEeChad0JzLk7QA_1159142715)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.CollateralPartyRole(asTakerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ex8eFcTGEeChad0JzLk7QA_-1939123823)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuaranteeBeneficiary)
        /// iso-link-3:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0p8TGEeChad0JzLk7QA_-1821987913)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.GuaranteePartyRole(asGuarantorRole)
        /// iso-link-4:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EuN0psTGEeChad0JzLk7QA_150894546)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asBorrower)
        /// iso-link-5:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// `status: Registered`
        /// bian-reference:  LoanAgreement.LoanProduct.Loan(asAsset).Trade.TradePartyRole(asLender)
        /// iso-link-6:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4d1CEeGAp99n2TKigg_-1009340668)
        /// general-info: guarantor/cosigner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("involvedPartyObligationEntitlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedPartyObligationEntitlement { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference: Loan.LoanType
        /// general-info: term, revolving, evergreen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanAmount { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asAsset).InvestmentAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FPv0acTGEeChad0JzLk7QA_-150026816/elements/_FepzGcTGEeChad0JzLk7QA_298530288)
        /// `status: Registered`
        /// bian-reference:  Loan(asDebt).PaymentCurrency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_X0hLUKRMEeO1ke9HGqKZhg)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanCurrency { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest.VariableRateChangeFrequency
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Fd5lKcTGEeChad0JzLk7QA_-958104524/elements/_FeNHIMTGEeChad0JzLk7QA_-12422289)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRateType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.PaymentPeriod
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.PaymentPeriod
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_jF5agJh7EeOUgsYi4EbJBw/elements/_AcedgZh9EeORjJTqwAvaiQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanRepaymentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanRepaymentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestAccrualMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterestAccrualMethod { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272632)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanOutstandingBalance { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOriginationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanOriginationDate { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanMaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string LoanMaturityDate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E6vNtsTGEeChad0JzLk7QA_393174175/elements/_lrcFQC1hEeGp2Zpvgj9Dtw_-638405304)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).CollateralAgreement.Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAllocation { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanProduct(asProduct).AvailableOption
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.SelectedOption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationOptions { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower).Player(asParty).Identification.TaxIdentificationNumber
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FEHzNMTGEeChad0JzLk7QA_-1382123937/elements/_FEHzNcTGEeChad0JzLk7QA_-1792766550)
        /// general-info: Tax-Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).PrePaymentSpeed
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ff_P1MTGEeChad0JzLk7QA_-1514166912/elements/_Fg4nt8TGEeChad0JzLk7QA_742037711)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.Limit
        /// general-info: allowed payments/withdrawals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanAccessTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanAccessTerms { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanStatus
        /// general-info: active, overdue, in-suspense, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanStatus { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCommentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCommentary { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConsumerLoanFulfillmentArrangementResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConsumerLoanFulfillmentArrangementResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RecordConsumerLoanFulfillmentArrangementResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecordConsumerLoanFulfillmentArrangementResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordConsumerLoanFulfillmentArrangementResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse : ExecutionBase
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.Disbursement.DisbursementOrder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disbursementOrderReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementOrderReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E4gZEcTGEeChad0JzLk7QA_2010102988)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Disbursement(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementDisbursementResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse : ExecutionBase
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTransactionReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan(asDebt).NextInterest.VariableInterest
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FXWRMsTGEeChad0JzLk7QA_-398781879/elements/_FXgCNMTGEeChad0JzLk7QA_-129916673)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicableRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicableRate { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Etn-xcTGEeChad0JzLk7QA_1929472526)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// `status: Registered`
        /// bian-reference-2:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset.PartyRole(asDebtorRole).CashAccount(asAccount).AccountPartyRole(asAccountServicerRole)
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_Ey118MTGEeChad0JzLk7QA_1536519000)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payerBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayerBankReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.InterestPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-1:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// `status: Registered`
        /// bian-reference:  Loan.PrincipalPaymentsSchedule.RelatedPaymentObligation.PaymentOffset
        /// iso-link-2:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FDPCYMTGEeChad0JzLk7QA_-1131921749/elements/_FDPCacTGEeChad0JzLk7QA_-72272631)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stagedRepaymentStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StagedRepaymentStatement { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.PrincipalAmount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_mw1ysHJTEeWwf47VrwMaTQ/elements/_QLjLYHJUEeWwf47VrwMaTQ)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanOutstandingBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LoanOutstandingBalance { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementRepaymentResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse
    {
        /// <summary>`status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Identification
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_E1rHgsTGEeChad0JzLk7QA_-1068889728/elements/_E1rHhcTGEeChad0JzLk7QA_-755813725)
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("withdrawlInstructionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WithdrawlInstructionReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_t-Si4N1CEeGAp99n2TKigg_-919072642)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNycTGEeChad0JzLk7QA_-591715083)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorRole)(asPaymentPartyRole).CashAccount
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EvtpdMTGEeChad0JzLk7QA_-1076538618/elements/_EvtpdsTGEeChad0JzLk7QA_1151666800)
        /// general-info: payee account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeProductInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeProductInstanceReference { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  Loan.Withdrawal(asPayment).PaymentPartyRole(asCreditorAgentRole)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_EteNyMTGEeChad0JzLk7QA_-246206935)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeBankReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayeeBankReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecuteConsumerLoanFulfillmentArrangementWithdrawalResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestConsumerLoanFulfillmentArrangementRestructuringResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringTaskReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringTaskReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringTask { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of issue to resolve
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringEvaluation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringEvaluation { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: definition of loan terms and configuration impact
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructuringSolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructuringSolution { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: loss/costs of restructuring
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restructingWriteDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RestructingWriteDown { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestConsumerLoanFulfillmentArrangementRestructuringResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestConsumerLoanFulfillmentArrangementRestructuringResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RetrieveMaintenanceResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: tasks, e.g. reporting and loan review actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productFulfillmentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductFulfillmentSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Code
        /// general-info: e.g tax, regulatory, accounting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTaxReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object LoanTaxReport { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanFeeType { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asCharges)
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asCharges)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FMBK9sTGEeChad0JzLk7QA_-398781908)
        /// general-info: as booked against loan account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanFees { get; set; }

        /// <summary>`status: Provisionally Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asPenalty)
        /// `status: Registered`
        /// bian-reference:  Loan.LoanAccount(asAccount).Adjustment(asPenalty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_eEiTMHRkEeKIFpWttHerUA_-261419352)
        /// general-info: as booked against loan account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penalties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Penalties { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement(asMasterAgreement).GovernedContract(asCollateralAgreement).Collateral.Valuation
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FLlGEcTGEeChad0JzLk7QA_1826831344/elements/_AAYPOmIjEeGD28DQaMef-g)
        /// general-info: value confirmed as of date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralValuation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralValuation { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RetrieveMaintenanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveMaintenanceResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RetrieveStatementsResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// general-info: loan account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementInstanceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementInstanceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// general-info: statement content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementTransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementTransactionType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Duration
        /// general-info: from-to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatementPeriod { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionRecordReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionRecordReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionPrincipleAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount TransactionPrincipleAmount { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string TransactionDateTime { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RetrieveStatementsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveStatementsResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Amount
    {
        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Amount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Amount>(data);
        }

    }

    public abstract class ExecutionBase
    {
        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YXSZF9p-Ed-ak6NoX_4Aeg_-1352517078)
        /// general-info: Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.
        /// Note: A zero amount is considered a positive amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        /// <summary>`status: Registered`
        /// bian-reference:  LoanAgreement.TradePartyRole(asBorrower)(asRole).Player(asParty)
        /// iso-link:  [click-here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/bc/_FNqJt8TGEeChad0JzLk7QA_-1317971633)
        /// general-info: loan account holder
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerReference { get; set; }

        /// <summary>`status: Registered`
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_bUhmRdp-Ed-ak6NoX_4Aeg_-1745414039)
        /// general-info: 'Code allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; }

        /// <summary>`status: Registered`,
        /// iso-link: [click_here](https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YW1tKtp-Ed-ak6NoX_4Aeg_-1624336183)
        /// general-info: A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
        /// Note on the time format:
        /// 1) beginning / end of calendar day
        /// 00:00:00 = the beginning of a calendar day
        /// 24:00:00 = the end of a calendar day
        /// 2) fractions of second in time format
        /// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]+)?(?:Z|[+-][01]\d:[0-5]\d)?$")]
        public string ValueDate { get; set; }
    }

#pragma warning restore
}