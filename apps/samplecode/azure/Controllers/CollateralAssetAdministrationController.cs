//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace FinancialServicesAccelerator.BIAN.WebApi.Controllers
{
#pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ICollateralAssetAdministrationController
    {
        /// <summary>Update Collateral asset administration</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Update Collateral Asset Administration</param>
        /// <returns>Successfully Updated Collateral Asset Administration Reporting.</returns>
        System.Threading.Tasks.Task<CollateralAssetUpdateResponse> UpdateCollateralAssetAdministrativePlanAsync(string cr_reference_id, UpdateCollateralAssetAdministrativePlanRequest body);

        /// <summary>Record activity/feedback</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Record Collateral Asset Administration</param>
        /// <returns>Created a new record</returns>
        System.Threading.Tasks.Task<RecordCollateralAssetAdministrativePlanResponse> RecordCollateralAssetAdministrativePlanAsync(string cr_reference_id, RecordCollateralAssetAdministrativePlanRequest body);

        /// <summary>Create a handling request for a collateral asset</summary>
        /// <param name="body">Collateral Asset Handling Request Payload</param>
        /// <returns>successfully created a Collateral</returns>
        System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanResponse> RequestCollateralAssetAdministrativePlanCreateAsync(RequestCollateralAssetAdministrativePlanRequest body);

        /// <summary>Update a handling request for a collateral asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Collateral Asset Handling Request Payload</param>
        /// <returns>Updated Collateral successfully</returns>
        System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanResponse> RequestCollateralAssetAdministrativePlanUpdateAsync(string cr_reference_id, RequestCollateralAssetAdministrativePlanRequest body);

        /// <summary>Create a new collateral asset administration valuation</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <returns>Refresh a valuation successfully</returns>
        System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanValuationCreateResponse> RequestCollateralAssetAdministrativePlanValuationCreateAsync(string cr_reference_id);

        /// <summary>Update an existing collateral asset administration valuation</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Valuation Reference</param>
        /// <param name="body">Update Collateral Asset Administration Valuation Request Payload</param>
        /// <returns>Refresh a valuation successfully</returns>
        System.Threading.Tasks.Task<CollateralAssetAdministrativePlanValuationResponse> RequestCollateralAssetAdministrativePlanValuationUpdateAsync(string cr_reference_id, string bq_reference_id, RequestCollateralAssetAdministrativePlanValuationUpdateRequest body);

        /// <summary>The initial registration of the collateral asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Create a New Collateral Asset Administration Registration Request Payload</param>
        /// <returns>Created a Capture successfully.</returns>
        System.Threading.Tasks.Task<CollateralAssetCaptureResponse> RequestCollateralAssetAdministrativePlanCaptureCreateAsync(string cr_reference_id, RequestCollateralAssetAdministrativePlanCaptureRequest body);

        /// <summary>Register/capture details of an asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Capture Reference</param>
        /// <param name="body">Capture/Update details of an existing asset Payload</param>
        /// <returns>Updated a Capture successfully</returns>
        System.Threading.Tasks.Task<CollateralAssetUpdateResponse> RequestCollateralAssetAdministrativePlanCaptureUpdateAsync(string cr_reference_id, string bq_reference_id, RequestCollateralAssetAdministrativePlanCaptureRequest body);

        /// <summary>Retrieve CR IDs</summary>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'collateralAssetJurisdiction = CAJ123'</param>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveCollateralAssetAdministrationReferenceIdsAsync(string collection_filter = null);

        /// <summary>Retrieve BQ names.</summary>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveCollateralAssetAdministrationBehaviorQualifiersAsync();

        /// <summary>Retrieve BQ Ids.</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="behavior_qualifier">Behavior Qualifier Name. ex- valuations</param>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'collateralAssetValuation &gt; 5000'</param>
        /// <returns>successful</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveBehaviorQualifierReferenceIdsAsync(string cr_reference_id, string behavior_qualifier, string collection_filter = null);

        /// <summary>Retrieve Collateral asset administration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <returns>Successfully retrieved collateral asset administration activity reports.</returns>
        System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanResponse> RetrieveCollateralAssetAdministrativePlanAsync(string cr_reference_id);

        /// <summary>Retrieve Collateral Asset Registration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Capture Reference</param>
        /// <returns>Successfully retrieved collateral asset administration registration information.</returns>
        System.Threading.Tasks.Task<CollateralAssetCaptureResponse> RetrieveCollateralAssetAdministrativePlanCaptureAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Collateral asset administration Valuation reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Valuation Reference</param>
        /// <returns>Successfully retrieved collateral asset administration valuation information.</returns>
        System.Threading.Tasks.Task<CollateralAssetAdministrativePlanValuationResponse> RetrieveCollateralAssetAdministrativePlanValuationAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Collateral asset administration Maintenance reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Maintenance Service Reference</param>
        /// <returns>Successfully retrieved collateral asset administration maintenance information.</returns>
        System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanMaintenanceResponse> RetrieveCollateralAssetAdministrativePlanMaintenanceAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Collateral asset administration Update reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Update Reference</param>
        /// <returns>Successfully retrieved collateral asset administration update information.</returns>
        System.Threading.Tasks.Task<CollateralAssetUpdateResponse> RetrieveCollateralAssetAdministrativePlanUpdateAsync(string cr_reference_id, string bq_reference_id);

        /// <summary>Retrieve Collateral asset administration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Reporting Service Reference</param>
        /// <returns>Successfully retrieved collateral asset administration reporting.</returns>
        System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanReportingResponse> RetrieveCollateralAssetAdministrativePlanReportingAsync(string cr_reference_id, string bq_reference_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("sd-clltrl-asset-admn/v1")]
    [Microsoft.AspNetCore.Authorization.Authorize]
    public partial class CollateralAssetAdministrationController : Microsoft.AspNetCore.Mvc.Controller
    {
        private ICollateralAssetAdministrationController _implementation;

        public CollateralAssetAdministrationController(ICollateralAssetAdministrationController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Update Collateral asset administration</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Update Collateral Asset Administration</param>
        /// <returns>Successfully Updated Collateral Asset Administration Reporting.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/updation")]
        public System.Threading.Tasks.Task<CollateralAssetUpdateResponse> UpdateCollateralAssetAdministrativePlan(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] UpdateCollateralAssetAdministrativePlanRequest body)
        {
            return _implementation.UpdateCollateralAssetAdministrativePlanAsync(cr_reference_id, body);
        }

        /// <summary>Record activity/feedback</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Record Collateral Asset Administration</param>
        /// <returns>Created a new record</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/recording")]
        public System.Threading.Tasks.Task<RecordCollateralAssetAdministrativePlanResponse> RecordCollateralAssetAdministrativePlan(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RecordCollateralAssetAdministrativePlanRequest body)
        {
            return _implementation.RecordCollateralAssetAdministrativePlanAsync(cr_reference_id, body);
        }

        /// <summary>Create a handling request for a collateral asset</summary>
        /// <param name="body">Collateral Asset Handling Request Payload</param>
        /// <returns>successfully created a Collateral</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/requisition")]
        public System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanResponse> RequestCollateralAssetAdministrativePlanCreate([Microsoft.AspNetCore.Mvc.FromBody] RequestCollateralAssetAdministrativePlanRequest body)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanCreateAsync(body);
        }

        /// <summary>Update a handling request for a collateral asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Collateral Asset Handling Request Payload</param>
        /// <returns>Updated Collateral successfully</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/requisition")]
        public System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanResponse> RequestCollateralAssetAdministrativePlanUpdate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RequestCollateralAssetAdministrativePlanRequest body)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanUpdateAsync(cr_reference_id, body);
        }

        /// <summary>Create a new collateral asset administration valuation</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <returns>Refresh a valuation successfully</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/valuations/requisition")]
        public System.Threading.Tasks.Task<RequestCollateralAssetAdministrativePlanValuationCreateResponse> RequestCollateralAssetAdministrativePlanValuationCreate(string cr_reference_id)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanValuationCreateAsync(cr_reference_id);
        }

        /// <summary>Update an existing collateral asset administration valuation</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Valuation Reference</param>
        /// <param name="body">Update Collateral Asset Administration Valuation Request Payload</param>
        /// <returns>Refresh a valuation successfully</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/valuations/{bq_reference_id}/requisition")]
        public System.Threading.Tasks.Task<CollateralAssetAdministrativePlanValuationResponse> RequestCollateralAssetAdministrativePlanValuationUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RequestCollateralAssetAdministrativePlanValuationUpdateRequest body)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanValuationUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>The initial registration of the collateral asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="body">Create a New Collateral Asset Administration Registration Request Payload</param>
        /// <returns>Created a Capture successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/captures/requisition")]
        public System.Threading.Tasks.Task<CollateralAssetCaptureResponse> RequestCollateralAssetAdministrativePlanCaptureCreate(string cr_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RequestCollateralAssetAdministrativePlanCaptureRequest body)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanCaptureCreateAsync(cr_reference_id, body);
        }

        /// <summary>Register/capture details of an asset</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Capture Reference</param>
        /// <param name="body">Capture/Update details of an existing asset Payload</param>
        /// <returns>Updated a Capture successfully</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/captures/{bq_reference_id}/requisition")]
        public System.Threading.Tasks.Task<CollateralAssetUpdateResponse> RequestCollateralAssetAdministrativePlanCaptureUpdate(string cr_reference_id, string bq_reference_id, [Microsoft.AspNetCore.Mvc.FromBody] RequestCollateralAssetAdministrativePlanCaptureRequest body)
        {
            return _implementation.RequestCollateralAssetAdministrativePlanCaptureUpdateAsync(cr_reference_id, bq_reference_id, body);
        }

        /// <summary>Retrieve CR IDs</summary>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'collateralAssetJurisdiction = CAJ123'</param>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveCollateralAssetAdministrationReferenceIds(string collection_filter = null)
        {
            return _implementation.RetrieveCollateralAssetAdministrationReferenceIdsAsync(collection_filter);
        }

        /// <summary>Retrieve BQ names.</summary>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/behavior-qualifiers/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveCollateralAssetAdministrationBehaviorQualifiers()
        {
            return _implementation.RetrieveCollateralAssetAdministrationBehaviorQualifiersAsync();
        }

        /// <summary>Retrieve BQ Ids.</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="behavior_qualifier">Behavior Qualifier Name. ex- valuations</param>
        /// <param name="collection_filter">Filter to refine the result set. ex- 'collateralAssetValuation &gt; 5000'</param>
        /// <returns>successful</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/{behavior-qualifier}/")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> RetrieveBehaviorQualifierReferenceIds(string cr_reference_id, string behavior_qualifier, string collection_filter = null)
        {
            return _implementation.RetrieveBehaviorQualifierReferenceIdsAsync(cr_reference_id, behavior_qualifier, collection_filter);
        }

        /// <summary>Retrieve Collateral asset administration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <returns>Successfully retrieved collateral asset administration activity reports.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/")]
        public System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanResponse> RetrieveCollateralAssetAdministrativePlan(string cr_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanAsync(cr_reference_id);
        }

        /// <summary>Retrieve Collateral Asset Registration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Capture Reference</param>
        /// <returns>Successfully retrieved collateral asset administration registration information.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/captures/{bq_reference_id}")]
        public System.Threading.Tasks.Task<CollateralAssetCaptureResponse> RetrieveCollateralAssetAdministrativePlanCapture(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanCaptureAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Collateral asset administration Valuation reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Valuation Reference</param>
        /// <returns>Successfully retrieved collateral asset administration valuation information.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/valuations/{bq_reference_id}")]
        public System.Threading.Tasks.Task<CollateralAssetAdministrativePlanValuationResponse> RetrieveCollateralAssetAdministrativePlanValuation(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanValuationAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Collateral asset administration Maintenance reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Maintenance Service Reference</param>
        /// <returns>Successfully retrieved collateral asset administration maintenance information.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/maintenances/{bq_reference_id}")]
        public System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanMaintenanceResponse> RetrieveCollateralAssetAdministrativePlanMaintenance(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanMaintenanceAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Collateral asset administration Update reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Update Reference</param>
        /// <returns>Successfully retrieved collateral asset administration update information.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/updates/{bq_reference_id}")]
        public System.Threading.Tasks.Task<CollateralAssetUpdateResponse> RetrieveCollateralAssetAdministrativePlanUpdate(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanUpdateAsync(cr_reference_id, bq_reference_id);
        }

        /// <summary>Retrieve Collateral asset administration reporting</summary>
        /// <param name="cr_reference_id">Collateral Asset Reference</param>
        /// <param name="bq_reference_id">Collateral Asset Reporting Service Reference</param>
        /// <returns>Successfully retrieved collateral asset administration reporting.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collateral-asset-administration/collateral-asset-administrative-plan/{cr_reference_id}/reportings/{bq_reference_id}")]
        public System.Threading.Tasks.Task<RetrieveCollateralAssetAdministrativePlanReportingResponse> RetrieveCollateralAssetAdministrativePlanReporting(string cr_reference_id, string bq_reference_id)
        {
            return _implementation.RetrieveCollateralAssetAdministrativePlanReportingAsync(cr_reference_id, bq_reference_id);
        }

    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateCollateralAssetAdministrativePlanRequest : CollateralAssetBase
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdateCollateralAssetAdministrativePlanRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCollateralAssetAdministrativePlanRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RecordCollateralAssetAdministrativePlanRequest
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Binary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RecordingRecord { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::DateTime      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordDateTime { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("empolyeeBusinessUnitReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmpolyeeBusinessUnitReference { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecordCollateralAssetAdministrativePlanRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordCollateralAssetAdministrativePlanRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestCollateralAssetAdministrativePlanRequest : CollateralAssetBase, ICollateralAssetRequestion, ICollateralAssetValuationHistory
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInsuranceReference { get; set; }
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetPledgedDate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationHistory { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestCollateralAssetAdministrativePlanRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestCollateralAssetAdministrativePlanRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestCollateralAssetAdministrativePlanValuationUpdateRequest
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refreshStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestCollateralAssetAdministrativePlanValuationUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestCollateralAssetAdministrativePlanValuationUpdateRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestCollateralAssetAdministrativePlanCaptureRequest : CollateralAssetBase, ICollateralAssetRequestion
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetPledgedDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestCollateralAssetAdministrativePlanCaptureRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestCollateralAssetAdministrativePlanCaptureRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollateralAssetUpdateResponse : CollateralAssetResponseBase
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetUpdateResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetUpdateResult { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetUpdateReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetUpdateReference { get; set; }

        public CollateralAssetUpdateResponse()
            :base ()
        {
        }

        public CollateralAssetUpdateResponse(CollateralAssetBase source, string id)
            :base(source, id)
        {
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CollateralAssetUpdateResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollateralAssetUpdateResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RecordCollateralAssetAdministrativePlanResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordingRecordStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordingRecordStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecordCollateralAssetAdministrativePlanResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordCollateralAssetAdministrativePlanResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestCollateralAssetAdministrativePlanResponse : CollateralAssetResponseBase, ICollateralAssetRequestion, ICollateralAssetValuationHistory
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetPledgedDate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationHistory { get; set; }

        public RequestCollateralAssetAdministrativePlanResponse(RequestCollateralAssetAdministrativePlanRequest source, string id)
            :base (source, id)
        {
            CollateralAssetInsuranceReference = source.CollateralAssetInsuranceReference;
            CollateralAssetPledgedDate = source.CollateralAssetPledgedDate;
            CollateralAssetValuationHistory = source.CollateralAssetValuationHistory;
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestCollateralAssetAdministrativePlanResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestCollateralAssetAdministrativePlanResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestCollateralAssetAdministrativePlanValuationCreateResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refreshStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshStatus { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RequestCollateralAssetAdministrativePlanValuationCreateResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestCollateralAssetAdministrativePlanValuationCreateResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollateralAssetCaptureResponse : CollateralAssetResponseBase, ICollateralAssetRequestion
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetPledgedDate { get; set; }

        public CollateralAssetCaptureResponse()
            : base()
        {
        }

        public CollateralAssetCaptureResponse(RequestCollateralAssetAdministrativePlanCaptureRequest source, string id)
            : base(source, id)
        {
            CollateralAssetInsuranceReference = source.CollateralAssetInsuranceReference;
            CollateralAssetPledgedDate = source.CollateralAssetPledgedDate;
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CollateralAssetCaptureResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollateralAssetCaptureResponse>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RetrieveCollateralAssetAdministrativePlanResponse : CollateralAssetBase, ICollateralAssetRequestion, ICollateralAssetValuationHistory
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetPledgedDate { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationHistory { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RetrieveCollateralAssetAdministrativePlanResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveCollateralAssetAdministrativePlanResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollateralAssetAdministrativePlanValuationResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationServiceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationServiceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Duration     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Ratio     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetLoanToValueRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetLoanToValueRatio { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuation { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CollateralAssetAdministrativePlanValuationResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CollateralAssetAdministrativePlanValuationResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RetrieveCollateralAssetAdministrativePlanMaintenanceResponse
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier         
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceTaskReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceTaskReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceTaskRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceTaskRecord { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier        
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceServiceProviderReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceServiceProviderReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Duration       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceSchedule { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier      
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetVerificationAndComplianceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetVerificationAndComplianceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Amount       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetMaintenanceSafekeepingFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetMaintenanceSafekeepingFees { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RetrieveCollateralAssetAdministrativePlanMaintenanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveCollateralAssetAdministrativePlanMaintenanceResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RetrieveCollateralAssetAdministrativePlanReportingResponse : CollateralAssetResponseBase, ICollateralAssetValuationHistory
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationHistory { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetReportingResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetReportingResult { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier       
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationServiceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetValuationServiceReference { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RetrieveCollateralAssetAdministrativePlanReportingResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveCollateralAssetAdministrativePlanReportingResponse>(data);
        }
    }

    public abstract class CollateralAssetBase
    {
        public CollateralAssetBase()
        {
        }

        public CollateralAssetBase(CollateralAssetBase source)
        {
            CollateralAssetType = source.CollateralAssetType;
            CollateralAssetProperties = source.CollateralAssetProperties;
            CollateralAssetDescription = source.CollateralAssetDescription;
            CollateralAssetTitle = source.CollateralAssetTitle;
            CollateralAssetLocation = source.CollateralAssetLocation;
            CollateralAssetJurisdiction = source.CollateralAssetJurisdiction;
            CollateralAssetDocumentReference = source.CollateralAssetDocumentReference;
            CollateralAssetDocumentType = source.CollateralAssetDocumentType;
            CollateralAssetOwnership = source.CollateralAssetOwnership;
            CollateralAssetInterestedParties = source.CollateralAssetInterestedParties;
        }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetProperties { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetDescription { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Name     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetTitle { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Name     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetLocation { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Name     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetJurisdiction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetJurisdiction { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetDocumentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetDocumentReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Text     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetDocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetDocumentType { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Name     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetOwnership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetOwnership { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Name     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInterestedParties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetInterestedParties { get; set; }
    }

    public abstract class CollateralAssetResponseBase : CollateralAssetBase
    {
        public CollateralAssetResponseBase()
        {
        }

        public CollateralAssetResponseBase(CollateralAssetBase source, string id)
            : base(source)
        {
            CollateralAssetReference = id;
        }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralAssetReference { get; set; }
    }

    public interface ICollateralAssetRequestion
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetInsuranceReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        string CollateralAssetInsuranceReference { get; set; }

        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::UNCEFACT::Date  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetPledgedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        string CollateralAssetPledgedDate { get; set; }
    }

    public interface ICollateralAssetValuationHistory
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Value     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetValuationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        string CollateralAssetValuationHistory { get; set; }
    }

    public interface ICollateralAssetCaptureRequisition : ICollateralAssetRequestion
    {
        /// <summary>`status: Not Mapped`
        /// core-data-type-reference: BIAN::DataTypesLibrary::CoreDataTypes::ISO20022andUNCEFACT::Identifier     
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAssetCaptureReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        string CollateralAssetCaptureReference { get; set; }
    }

#pragma warning restore
}